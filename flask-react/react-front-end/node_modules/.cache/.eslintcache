[{"/Users/aaronbasch/Desktop/ddsp_bending/neural-circuit-bending/flask-react/react-front-end/src/index.js":"1","/Users/aaronbasch/Desktop/ddsp_bending/neural-circuit-bending/flask-react/react-front-end/src/App.js":"2","/Users/aaronbasch/Desktop/ddsp_bending/neural-circuit-bending/flask-react/react-front-end/src/reportWebVitals.js":"3","/Users/aaronbasch/Desktop/ddsp_bending/neural-circuit-bending/flask-react/react-front-end/src/LineChart.js":"4"},{"size":479,"mtime":1650377271878,"results":"5","hashOfConfig":"6"},{"size":22640,"mtime":1652447683580,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1650377271879,"results":"8","hashOfConfig":"6"},{"size":2145,"mtime":1650980671524,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"gjmwbz",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/aaronbasch/Desktop/ddsp_bending/neural-circuit-bending/flask-react/react-front-end/src/index.js",[],[],["24","25"],"/Users/aaronbasch/Desktop/ddsp_bending/neural-circuit-bending/flask-react/react-front-end/src/App.js",["26","27","28","29","30","31","32","33","34","35","36"],[],"import React, {useState, useEffect} from 'react'\n\nimport './App.css';\nimport axios from 'axios';\n\nimport Container from 'react-bootstrap/Container'\nimport Button from 'react-bootstrap/Button'\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport viola_trans from '/Users/aaronbasch/Desktop/ddsp_bending/neural-circuit-bending/flask-react/react-front-end/src/viola_sustained_transformed.wav';\nimport keys_trans from '/Users/aaronbasch/Desktop/ddsp_bending/neural-circuit-bending/flask-react/react-front-end/src/piano_c5_transformed.wav';\nimport vox_trans from '/Users/aaronbasch/Desktop/ddsp_bending/neural-circuit-bending/flask-react/react-front-end/src/male_choir_transformed.wav';\n\nimport viola_original from '/Users/aaronbasch/Desktop/ddsp_bending/neural-circuit-bending/flask-react/react-front-end/src/viola_sustained_original.mp3';\nimport keys_original from '/Users/aaronbasch/Desktop/ddsp_bending/neural-circuit-bending/flask-react/react-front-end/src/piano_c5_original.wav';\nimport vox_original from '/Users/aaronbasch/Desktop/ddsp_bending/neural-circuit-bending/flask-react/react-front-end/src/male_choir_original.wav';\n\nimport viola_original_spec from './viola_sustained_original_spec.jpg';\nimport keys_original_spec from './keys_sustained_original_spec.jpg';\nimport vox_original_spec from './vox_sustained_original_spec.jpg';\n\n\nimport viola_trans_spec from './viola_sustained_transformed_spec.jpg';\nimport keys_trans_spec from './keys_sustained_transformed_spec.jpg';\nimport vox_trans_spec from './vox_sustained_transformed_spec.jpg';\n\n\n\n  \nfunction App() {\n  const [layers, setLayers] = useState({\n    DENSE_0:{WEIGHTS:{transform:'', value:0, operand:1, min:0, max:1},\n            BIASES:{transform:'', value:0, operand:1, min:0, max:1}},\n    DENSE_1:{WEIGHTS:{transform:'', value:0, operand:1, min:0, max:1},\n            BIASES:{transform:'', value:0, operand:1, min:0, max:1}},\n    DENSE_2:{WEIGHTS:{transform:'', value:0, operand:1, min:0, max:1},\n            BIASES:{transform:'', value:0, operand:1, min:0, max:1}},\n    DENSE_3:{WEIGHTS:{transform:'', value:0, operand:1, min:0, max:1},\n            BIASES:{transform:'', value:0, operand:1, min:0, max:1}},\n    DENSE_4:{WEIGHTS:{transform:'', value:0, operand:1, min:0, max:1},\n            BIASES:{transform:'', value:0, operand:1, min:0, max:1}},\n    DENSE_5:{WEIGHTS:{transform:'', value:0, operand:1 , min:0, max:1},\n            BIASES:{transform:'', value:0, operand:1 , min:0, max:1}},\n    GRU_6:{WEIGHTS:{transform:'', value:0, operand:1 , min:0, max:1},\n            RECURRENT:{transform:'', value:0, operand:1 , min:0, max:1},\n            BIASES:{transform:'', value:0, operand:1 , min:0, max:1}},\n    DENSE_7:{WEIGHTS:{transform:'', value:0, operand:1 , min:0, max:1},\n            BIASES:{transform:'', value:0, operand:1 , min:0, max:1}},\n    DENSE_8:{WEIGHTS:{transform:'', value:0, operand:1 , min:0, max:1},\n            BIASES:{transform:'', value:0, operand:1 , min:0, max:1}},\n    DENSE_9:{WEIGHTS:{transform:'', value:0, operand:1 , min:0, max:1},\n            BIASES:{transform:'', value:0, operand:1 , min:0, max:1}},\n    DENSE_10:{WEIGHTS:{transform:'', value:0, operand:1 , min:0, max:1},\n            BIASES:{transform:'', value:0, operand:1 , min:0, max:1}}\n  });\n  const [prevLayers, setPrevLayers] = useState({\n    DENSE_0:{WEIGHTS:{transform:'', value:0, operand:1, min:0, max:1},\n            BIASES:{transform:'', value:0, operand:1, min:0, max:1}},\n    DENSE_1:{WEIGHTS:{transform:'', value:0, operand:1, min:0, max:1},\n            BIASES:{transform:'', value:0, operand:1, min:0, max:1}},\n    DENSE_2:{WEIGHTS:{transform:'', value:0, operand:1, min:0, max:1},\n            BIASES:{transform:'', value:0, operand:1, min:0, max:1}},\n    DENSE_3:{WEIGHTS:{transform:'', value:0, operand:1, min:0, max:1},\n            BIASES:{transform:'', value:0, operand:1, min:0, max:1}},\n    DENSE_4:{WEIGHTS:{transform:'', value:0, operand:1, min:0, max:1},\n            BIASES:{transform:'', value:0, operand:1, min:0, max:1}},\n    DENSE_5:{WEIGHTS:{transform:'', value:0, operand:1 , min:0, max:1},\n            BIASES:{transform:'', value:0, operand:1 , min:0, max:1}},\n    GRU_6:{WEIGHTS:{transform:'', value:0, operand:1 , min:0, max:1},\n            RECURRENT:{transform:'', value:0, operand:1 , min:0, max:1},\n            BIASES:{transform:'', value:0, operand:1 , min:0, max:1}},\n    DENSE_7:{WEIGHTS:{transform:'', value:0, operand:1 , min:0, max:1},\n            BIASES:{transform:'', value:0, operand:1 , min:0, max:1}},\n    DENSE_8:{WEIGHTS:{transform:'', value:0, operand:1 , min:0, max:1},\n            BIASES:{transform:'', value:0, operand:1 , min:0, max:1}},\n    DENSE_9:{WEIGHTS:{transform:'', value:0, operand:1 , min:0, max:1},\n            BIASES:{transform:'', value:0, operand:1 , min:0, max:1}},\n    DENSE_10:{WEIGHTS:{transform:'', value:0, operand:1 , min:0, max:1},\n            BIASES:{transform:'', value:0, operand:1 , min:0, max:1}}\n  });\n\n  const [instrument, setInstrument] = useState({INSTRUMENT:'VIOLA'})\n  const [audio, setAudio] = useState()\n  const [audioFile, setAudioFile] = useState()\n  const [editedData,setEditedData] = useState()\n\n  const transformTypes = ['','zero','inverse','shuffle','multiply','identity','random']\n\n  const generateTransform = () => {\n\n    const article = { 'members': layers}\n    axios.post('/generate', article).then(response => article).then(\n      editedData => {\n        setEditedData(article)\n        console.log(article)\n      }\n    );\n  }\n\n  function adjustInstrument(instrument_){\n    // Simple POST request with a JSON body using axios\n    const instData = {INSTRUMENT:instrument_}\n    const article = { 'members': instData}\n    setInstrument({...instData})\n    axios.post('/upload', article).then(response => article).then(\n      editedData => {\n        setEditedData(article)\n        console.log(article)\n      }\n    );\n  }\n\n  const getTransform = (layer_,type) => {\n    const transform_ = layers[layer_][type].transform\n    return (\n      transform_==='multiply'? transform_+'*'+layers[layer_][type].operand: transform_\n    )\n    \n  }\n\n  const getAudioTransformed = () => {\n    if(instrument.INSTRUMENT==='VIOLA'){\n      return viola_trans\n    }else if (instrument.INSTRUMENT==='KEYS'){\n      return keys_trans\n    }else{\n      return vox_trans\n    }\n  }\n\n  function resetModel() {\n    const article = { 'members': 'reset'}\n    axios.post('/reset', article).then(response => article).then(\n      editedData => {\n        setEditedData(article)\n        console.log(article)\n      }\n    );\n  }\n\n  function postAudio() {\n    const article = { 'members': audio}\n    axios.post('/upload', article).then(response => article).then(\n      editedData => {\n        setEditedData(article)\n        console.log(article)\n      }\n    );\n  }\n  \n  function Upload() { \n    const handleFileSelected = (e) => {\n      const files = Array.from(e.target.files)\n      if (e.target.files[0]) {\n        setAudio(URL.createObjectURL(e.target.files[0]));\n        setAudioFile(e.target.files[0])\n        postAudio()\n      }\n      console.log(\"files:\", files[0].name)\n    }\n    \n    return (\n      <div>\n      <input className='description' onChange={handleFileSelected} type=\"file\" accept='.wav, .mp3'/>\n      {audio&&\n        <audio src={audio} controls autoplay muted style={{marginLeft:'-50px', transform: 'scale(.7)'}}/>}\n      </div>\n    )\n  }\n\n  const drawConnections = (width_) => {\n    function numberRange (start, end) {\n      return new Array(end - start).fill().map((d, i) => i + start);\n    }\n    const max = 5\n    return (\n      <svg className='connections' width={width_}>\n      {numberRange(0,max+1).map((y1_) => \n          numberRange(0,max+1).map((y2_) =>\n            (\n              <line x1=\"0\" x2={width_} y1={y1_*(100/max)+'%'} y2={y2_*(100/max)+'%'}  \n                  style={{stroke:'grey', strokeWidth:'1px'}}/>\n            )\n          )\n        )}\n        \n      </svg>\n    )\n  }\n\n  const adjustOperand = (layer_,type,operand_) => {\n    const new_layers = layers\n    new_layers[layer_][type].operand = operand_.target.value\n    setPrevLayers({...layers})\n    setLayers({...new_layers})\n  }\n\n  const adjustMin = (layer_,type,min_) => {\n    const new_layers = layers\n    new_layers[layer_][type].min = min_.target.value\n    setPrevLayers({...layers})\n    setLayers({...new_layers})\n  }\n\n  const adjustMax = (layer_,type,max_) => {\n    const new_layers = layers\n    new_layers[layer_][type].max = max_.target.value\n    setPrevLayers({...layers})\n    setLayers({...new_layers})\n  }\n\n  const getSpecInput = () => {\n    if(instrument.INSTRUMENT==='VIOLA'){\n      return viola_original_spec\n    }else if(instrument.INSTRUMENT==='KEYS'){\n      return keys_original_spec\n    }else if(instrument.INSTRUMENT==='VOX'){\n      return vox_original_spec\n    }\n  }\n\n  const getSpecOutput = () => {\n    if(instrument.INSTRUMENT==='VIOLA'){\n      return viola_trans_spec\n    }else if(instrument.INSTRUMENT==='KEYS'){\n      return keys_trans_spec\n    }else if(instrument.INSTRUMENT==='VOX'){\n      return vox_trans_spec\n    }\n  }\n\n  const adjustValue = (layer_,type,value_) => {\n    const new_layers = layers\n    new_layers[layer_][type].value = value_.target.value\n    setPrevLayers({...layers})\n    setLayers({...new_layers})\n    console.log(layers)\n  }\n\n  const clearTransforms = () => {\n    const clear_trans = {\n      DENSE_0:{WEIGHTS:{transform:'', value:0, operand:1},\n              BIASES:{transform:'', value:0, operand:1}},\n      DENSE_1:{WEIGHTS:{transform:'', value:0, operand:1},\n              BIASES:{transform:'', value:0, operand:1}},\n      DENSE_2:{WEIGHTS:{transform:'', value:0, operand:1},\n              BIASES:{transform:'', value:0, operand:1}},\n      DENSE_3:{WEIGHTS:{transform:'', value:0, operand:1},\n              BIASES:{transform:'', value:0, operand:1}},\n      DENSE_4:{WEIGHTS:{transform:'', value:0, operand:1},\n              BIASES:{transform:'', value:0, operand:1}},\n      DENSE_5:{WEIGHTS:{transform:'', value:0, operand:1},\n              BIASES:{transform:'', value:0, operand:1}},\n      GRU_6:{WEIGHTS:{transform:'', value:0, operand:1},\n              RECURRENT:{transform:'', value:0, operand:1},\n              BIASES:{transform:'', value:0, operand:1}},\n      DENSE_7:{WEIGHTS:{transform:'', value:0, operand:1},\n              BIASES:{transform:'', value:0, operand:1}},\n      DENSE_8:{WEIGHTS:{transform:'', value:0, operand:1},\n              BIASES:{transform:'', value:0, operand:1}},\n      DENSE_9:{WEIGHTS:{transform:'', value:0, operand:1},\n              BIASES:{transform:'', value:0, operand:1}},\n      DENSE_10:{WEIGHTS:{transform:'', value:0, operand:1},\n              BIASES:{transform:'', value:0, operand:1}}\n    }\n    setPrevLayers({...layers})\n    setLayers({...clear_trans})\n  }\n\n  const undo = () => {\n    setLayers({...prevLayers})\n  }\n\n  const adjustTransform = (transform_,layer_,type) => {\n    const new_layers = layers\n    \n    if(new_layers[layer_][type].transform===transform_ || transform_==='none'){\n      new_layers[layer_][type].transform = ''\n    }else{\n      new_layers[layer_][type].transform = transform_\n    }\n    setPrevLayers({...layers})\n    setLayers({...new_layers})\n  }\n\n  const getColor = (transform_,layer_,type) => {\n    if( layers[layer_][type].transform===transform_){\n      return \"rgb(119, 184, 201)\"\n    }else{\n      return \"black\"\n    }\n  }\n  const Recurrent_Layer = (layer_) => {\n    return (\n      ['WEIGHTS','RECURRENT','BIASES'].map((type)=>(<div className='chip'>\n       \n        <div className='gru' >\n        \n        <div className='description'>\n          <div style={{position:'relative',justifyContent:'center'}}>\n          <p style={{margin:'0', color:'black',fontSize:'1.2em', fontStyle:'italic', justifyContent:'center'}}>\n            {type+':'}\n          </p>\n          {/* <input type=\"range\" min=\"1\" max=\"100\" className=\"mainSlider\" id=\"myRange\" onChange={(val)=>adjustValue(layer_,type,val)} style={{position:'absolute', top:'0'}}/> */}\n          </div>\n          <select value={layers[layer_][type].transform} onChange={(e)=>{adjustTransform(e.target.value,layer_,type)}}>\n          {transformTypes.map((transform_) => (\n          <option className=\"a dropdown-item\">{transform_}</option>\n        ))}\n          </select>\n          <div>\n            {layers[layer_][type].transform==='multiply'&&(<div>\n              *\n            <input type=\"number\" value={layers[layer_][type].operand} style={{maxWidth:'80px',border:'0px solid #ffffff',outline:'0px solid #ffffff'}}onChange={(op)=>adjustOperand(layer_,type,op)}/>\n            </div>)}\n          </div>\n          <div>\n            {layers[layer_][type].transform==='random'&&(<div>\n              min:\n            <input type=\"number\" value={layers[layer_][type].min} style={{maxWidth:'80px',border:'0px solid #ffffff',outline:'0px solid #ffffff'}}onChange={(min)=>adjustMin(layer_,type,min)}/>\n            </div>)}\n          </div>\n          <div>\n            {layers[layer_][type].transform==='random'&&(<div>\n              max:\n            <input type=\"number\" value={layers[layer_][type].max} style={{maxWidth:'80px',border:'0px solid #ffffff',outline:'0px solid #ffffff'}}onChange={(max)=>adjustMax(layer_,type,max)}/>\n            </div>)}\n          </div>\n\n          {/* {transformTypes.map((transform_)=>(\n            <div style={{position:'relative'}}>\n              <p className='transformType'\n                style={{justifyContent:'center', margin:'0', color:getColor(transform_,layer_,type)}}\n                onClick={()=>adjustTransform(transform_,layer_,type)}>\n                  {transform_==='multiply'? transform_+'*'+layers[layer_][type].operand:transform_}\n              </p>\n              <div style={{position:'absolute', top:'13.5px', left:'0'}}>\n              {transform_==='multiply'&&\n              layers[layer_][type].transform===transform_&&<input type=\"range\" min=\"-999\" max=\"999\" className=\"slider\" id=\"myRange\" onChange={(op)=>adjustOperand(layer_,type,op)}/>}\n              </div>\n              </div>\n            ))} */}\n            \n          \n        </div>\n        \n\n\n      </div>\n      \n      </div>))\n\n    )\n  }\n\n  const Dense_Layer = (layer_) => {\n    return (\n      ['WEIGHTS','BIASES'].map((type)=>(<div className='chip'>\n\n        <div className='gru'>\n        <div className='description dense'>\n          <div style={{position:'relative'}}>\n          <p style={{margin:'0', color:'black',fontSize:'1.2em', fontStyle:'italic'}}>\n            {type+':'}\n          </p>\n          {/* <input type=\"range\" min=\"1\" max=\"100\" className=\"mainSlider\" id=\"myRange\" onChange={(val)=>adjustValue(layer_,type,val)} style={{position:'absolute', top:'0'}}/> */}\n          </div>\n          <select value={layers[layer_][type].transform} onChange={(e)=>{adjustTransform(e.target.value,layer_,type)}}>\n          {transformTypes.map((transform_) => (\n          <option className=\"a dropdown-item\">{transform_}</option>\n        ))}\n          </select>\n          <div>\n            {layers[layer_][type].transform==='multiply'&&(<div>\n              *\n            <input type=\"number\" value={layers[layer_][type].operand} style={{maxWidth:'80px',border:'0px solid #ffffff',outline:'0px solid #ffffff'}}onChange={(op)=>adjustOperand(layer_,type,op)}/>\n            </div>)}\n          </div>\n          <div>\n            {layers[layer_][type].transform==='random'&&(<div>\n              min:\n            <input type=\"number\" value={layers[layer_][type].min} style={{maxWidth:'80px',border:'0px solid #ffffff',outline:'0px solid #ffffff'}}onChange={(min)=>adjustMin(layer_,type,min)}/>\n            </div>)}\n          </div>\n          <div>\n            {layers[layer_][type].transform==='random'&&(<div>\n              max:\n            <input type=\"number\" value={layers[layer_][type].max} style={{maxWidth:'80px',border:'0px solid #ffffff',outline:'0px solid #ffffff'}}onChange={(max)=>adjustMax(layer_,type,max)}/>\n            </div>)}\n          </div>\n\n          {/* <Dropdown>\n        <Dropdown.Toggle  id=\"dropdown-basic\">\n        {getTransform(layer_,type)}\n        </Dropdown.Toggle>\n\n        <Dropdown.Menu>\n        {transformTypes.map((transform_) => (\n          <Dropdown.Item className=\"a dropdown-item\" onClick = {() => adjustTransform(transform_,layer_,type)}>{transform_}</Dropdown.Item>\n        ))}\n          \n          \n        </Dropdown.Menu>\n        <div >\n          {layers[layer_][type].transform==='multiply'&&\n          <input type=\"range\" min=\"-999\" max=\"999\" className=\"slider\" id=\"myRange\" onChange={(op)=>adjustOperand(layer_,type,op)}/>}\n        </div>\n      </Dropdown> */}\n          {/* {transformTypes.map((transform_)=>(\n            <div style={{position:'relative'}}>\n              <p className='transformType'\n                style={{ margin:'0', color:getColor(transform_,layer_,type)}}\n                onClick={()=>adjustTransform(transform_,layer_,type)}>\n                 {transform_==='multiply'? transform_+'*'+layers[layer_][type].operand:transform_}\n              </p>\n              <div style={{position:'absolute', top:'13.5px', left:'0'}}>\n              {transform_==='multiply'&&\n              layers[layer_][type].transform===transform_&&<input type=\"range\" min=\"-999\" max=\"999\" className=\"slider\" id=\"myRange\" onChange={(op)=>adjustOperand(layer_,type,op)}/>}\n              </div>\n              </div>\n            ))} */}\n            \n          \n        </div>\n        \n\n\n      </div>\n      \n      </div>))\n\n    )\n  }\n\n  return (\n    <div style={{background: 'white', height: '100vh', marginTop: '50px',\n    minHeight : '100vh'}}>\n      <Container>\n        <Row>\n          \n          <Col md={3} className='sidebar'>\n              <p className='description title'>\n                Network Bending\n              </p>\n              <p className='description subtitle'>\n                INPUT:\n              </p>\n              <div >\n                <div style={{position:'relative'}}>\n                <button style={{backgroundColor:instrument.INSTRUMENT==='VIOLA'?'rgb(119, 184, 201)':'rgb(240,240,240)', position:'absolute',left:'50px',top:'17px',height:'20px',width:'50px'}}className='description' onClick={() => adjustInstrument('VIOLA')} variant={'Gen'}>VIOLA</button>\n                <audio src={viola_original}  controls style={{marginLeft:'50px',transform:'scale(.5)'}}/>\n                </div>\n                <div style={{position:'relative'}}>\n                <button style={{backgroundColor:instrument.INSTRUMENT==='KEYS'?'rgb(119, 184, 201)':'rgb(240,240,240)', position:'absolute',left:'50px',top:'17px',height:'20px',width:'50px'}}className='description' onClick={() => adjustInstrument('KEYS')} variant={'Gen'}>KEYS</button>\n                <audio src={keys_original}  controls style={{marginLeft:'50px',transform:'scale(.5)'}}/>\n                </div>\n                <div style={{position:'relative'}}>\n                <button style={{backgroundColor:instrument.INSTRUMENT==='VOX'?'rgb(119, 184, 201)':'rgb(240,240,240)', position:'absolute',left:'50px',top:'17px',height:'20px',width:'50px'}}className='description' onClick={() => adjustInstrument('VOX')} variant={'Gen'}>VOX</button>\n                <audio src={vox_original}  controls style={{marginLeft:'50px',transform:'scale(.5)'}}/>\n                </div>\n            \n              </div>\n\n              <p className='description subtitle'>\n                OUTPUT:\n              </p>\n              <div>\n                <div style={{position:'relative'}}>\n                <button style={{position:'absolute',left:'50px',top:'17px',height:'20px',width:'50px'}}className='description' onClick={() => generateTransform()}>APPLY</button>\n                <audio src={getAudioTransformed()}  controls style={{marginLeft:'50px',transform:'scale(.5)'}}/>\n                \n                </div>\n                <div>\n                <button style={{height:'20px',width:'150px'}} className='description' onClick={() => resetModel()}>reset model</button>\n                </div>\n                <div>\n                <button style={{height:'20px',width:'150px'}} className='description' onClick={() => clearTransforms()}>clear transforms</button>\n                </div>\n                <div>\n                <button style={{height:'20px',width:'50px'}} className='description' onClick={() => undo()}>undo</button>\n                </div>\n              </div>\n\n              \n          </Col>\n\n          <Col>\n          \n            <div className='circuit_board' style={{justifyContent:'center'}}>\n            <div style={{display:'flex',flexWrap:'wrap',marginTop:'20px',marginBottom:'20px'}}>\n  \n            {/* <div className='layer input' >\n            \n            </div>\n            {drawConnections(150)} */}\n            </div>\n            <div className='layer' style={{justifyContent:'center',display:'flex',flexWrap:'wrap',marginTop:'20px'}}>\n            <div className='gru' style={{justifyContent:'center',maxWidth:'150px',maxHeight:'150px'}}>\n              <img src={getSpecInput()} style={{maxWidth:'150px',maxHeight:'150px'}}/>\n              \n            </div></div>\n            <div style={{justifyContent:'center',maxWidth:'150px',maxHeight:'150px',marginTop:'20px'}}>\n            {drawConnections(100)}\n            </div>\n            \n                {Object.keys(layers).map((layer_)=>(\n                  <div style={{justifyContent:'center',display:'flex',flexWrap:'wrap',marginTop:'20px'}}>\n                  <div className='layer' style={{justifyContent:'center'}}>\n                    <p className='description' style={{margin:'0', color:'black',fontSize:'1.5em'}}>{layer_}</p>\n                    <div className='break'></div>\n                    {layer_.slice(0, 5)==='DENSE'? \n                        Dense_Layer(layer_):Recurrent_Layer(layer_)\n\n                        }\n                    </div>\n                    {layer_!=='OUTPUT' && drawConnections(100)}\n                    </div>\n                  \n                ))}\n               \n              {/* <p className='break'></p> */}\n              \n              <div className='layer' style={{justifyContent:'center',display:'flex',flexWrap:'wrap',marginTop:'20px'}}>\n            <div className='gru' style={{justifyContent:'center',maxWidth:'150px',maxHeight:'150px'}}>\n              <img src={getSpecOutput()} style={{maxWidth:'150px',maxHeight:'150px'}}/>\n              \n            </div></div>\n            </div>\n            \n          </Col>\n        \n        </Row>\n      </Container>\n    </div>\n  )\n}\n\nexport default App","/Users/aaronbasch/Desktop/ddsp_bending/neural-circuit-bending/flask-react/react-front-end/src/reportWebVitals.js",[],[],"/Users/aaronbasch/Desktop/ddsp_bending/neural-circuit-bending/flask-react/react-front-end/src/LineChart.js",[],[],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":1,"column":26,"nodeType":"43","messageId":"44","endLine":1,"endColumn":35},{"ruleId":"41","severity":1,"message":"45","line":7,"column":8,"nodeType":"43","messageId":"44","endLine":7,"endColumn":14},{"ruleId":"41","severity":1,"message":"46","line":8,"column":8,"nodeType":"43","messageId":"44","endLine":8,"endColumn":16},{"ruleId":"41","severity":1,"message":"47","line":87,"column":10,"nodeType":"43","messageId":"44","endLine":87,"endColumn":19},{"ruleId":"41","severity":1,"message":"48","line":88,"column":10,"nodeType":"43","messageId":"44","endLine":88,"endColumn":20},{"ruleId":"41","severity":1,"message":"49","line":116,"column":9,"nodeType":"43","messageId":"44","endLine":116,"endColumn":21},{"ruleId":"41","severity":1,"message":"50","line":154,"column":12,"nodeType":"43","messageId":"44","endLine":154,"endColumn":18},{"ruleId":"41","severity":1,"message":"51","line":235,"column":9,"nodeType":"43","messageId":"44","endLine":235,"endColumn":20},{"ruleId":"41","severity":1,"message":"52","line":289,"column":9,"nodeType":"43","messageId":"44","endLine":289,"endColumn":17},{"ruleId":"53","severity":1,"message":"54","line":502,"column":15,"nodeType":"55","endLine":502,"endColumn":87},{"ruleId":"53","severity":1,"message":"54","line":528,"column":15,"nodeType":"55","endLine":528,"endColumn":88},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Dropdown' is defined but never used.","'audioFile' is assigned a value but never used.","'editedData' is assigned a value but never used.","'getTransform' is assigned a value but never used.","'Upload' is defined but never used.","'adjustValue' is assigned a value but never used.","'getColor' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]